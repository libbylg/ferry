#!/bin/bash


SELFDIR=$(cd $(dirname ""$0);pwd)
WORKDIR=$(pwd)

export REASON

#   $1  packageFile
#   $2  installDir
function decompress_package()
{
    local packageFile="$1"
    local installDir="$2"

    cd  "${installDir}"
    RESULT=$?
    if [[ ${RESULT} -ne 0 ]]; then
        REASON="Can not access the install directory(${RESULT}): '${installDir}'"
        return  2
    fi

    if [[ "${packageFile}" =~ .*\.tar$ ]]; then
        tar xf  "${packageFile}"
        RESULT=$?
    elif [[ "${packageFile}" =~ .*\.tar\.gz$ ]]; then
        tar xfz "${packageFile}"
        RESULT=$?
    elif [[ "${packageFile}" =~ .*\.zip$ ]]; then
        unzip   "${packageFile}"
        RESULT=$?
    else
        REASON="Unsupported package format(${RESULT}): '${packageFile}'"
        return  3
    fi

    RESULT=$?
    if [[ ${RESULT} -ne 0 ]]; then
        REASON="Install package failed(${RESULT}): '${packageFile}' -> '${installDir}'"
        return  4
    fi

    return  0
}


# $1  <PKGNAME>/<PKGVERSION>
# #2  <PKGPLATFORM>/<PKGARCH>
function required()
{
    local PKGNAMEVER=$1
    local PKGPLTARCH=$2

    local PKGNAME=$(echo        "${PKGNAMEVER}" | awk -F '/' '{print $1}')
    local PKGVERSION=$(echo     "${PKGNAMEVER}" | awk -F '/' '{print $2}')
    local PKGPLATFORM=$(echo    "${PKGPLTARCH}" | awk -F '/' '{print $1}')
    local PKGARCH=$(echo        "${PKGPLTARCH}" | awk -F '/' '{print $2}')

    local pkgdir="${FERRY_REPO_ROOT}/${PKGNAME}-${PKGVERSION}/${PKGPLATFORM}-${PKGARCH}"
    if [[ ! -d "${pkgdir}" ]]; then
        echo    "[Fail] '${PKGNAMEVER} ${PKGPLTARCH}' : Can not install package under '${FERRY_REPO_ROOT}'"
        return  1
    fi

    local files=$(cd "${pkgdir}"; ls "${pkgdir}")
    for f in ${files} ; do
        if [[ "${f}" == "." ]] || [[ "${f}" == ".." ]]; then
            continue
        fi

        rm -rf   "${FERRY_DEPS_ROOT}/${PKGNAME}"
        mkdir -p "${FERRY_DEPS_ROOT}/${PKGNAME}"
        REASON=""
        decompresss_package  "${pkgdir}/${f}" "${FERRY_DEPS_ROOT}/${PKGNAME}"
        RESULT=$?
        if [[ ${RESULT} -ne 0 ]]; then
            echo    "[Fail] '${PKGNAMEVER} ${PKGPLTARCH}' : '${f}' : ${REASON}"
            return  2
        else
            echo    "[ OK ] '${PKGNAMEVER} ${PKGPLTARCH}' : '${f}'"
        fi
    done

    return  0

}
export required


function help()
{
	echo	"Usage:"
	echo	""
}


function init()
{
    #   导出变量
    export FERRY_REPO_ROOT=""
    export FERRY_DEPS_ROOT=""

    #   确定rc文件的位置
    local rcDir=${WORKDIR}
    while [[ ! -f "${rcDir}/.ferryrc" ]]; do
        if [[ "${rcDir}" == "" ]] || [[ "${rcDir}" == "/" ]]; then
            echo    "Can not locate to entry script file: '.ferryrc'"
            rcDir=""
            break
        fi
        rcDir=$(dirname "${rcDir}")
    done

    #   加载rc文件
    if [[ -d "${rcDir}" ]] && [[  ]]; then
        source "${rcDir}/.ferryrc"
        RESULT=$?
        if [[ ${RESULT} -ne 0 ]]; then
            echo    "Load initialize file failed(${RESULT}): '${rcDir}/.ferryrc'"
            return  2
        fi
    fi

    #   对严重错误配置进行校验
    if [[ "${FERRY_REPO_ROOT}" == "/" ]]; then
        echo    "Unsupported use the '/' as the local repository"
        return  3
    fi

    #   对缺省进行矫正
    if [[ "${FERRY_REPO_ROOT}" == "" ]]; then
        FERRY_REPO_ROOT=$(cd "~/.ferry-repo";pwd)
    fi

    #   对缺省进行矫正
    if [[ "${FERRY_REPO_ROOT}" == "" ]]; then
        FERRY_DEPS_ROOT="${WORKDIR}"
    fi

    return  0
}


#	$1	install
#	$2	[<DEFINE-DIR>|<DEFINE-FILE>]
function install()
{
    local defineFiles=""
    if [[ $# -eq 1 ]]; then
        defineFiles=$(ls "${WORKDIR}" | grep -E '.*\.ferry')
    fi

    if [[ -f "$2" ]]; then
        defineFiles="$2"
    elif [[ -d "$2" ]]; then
        defineFiles=$(ls "$2" | grep -E '.*\.ferry')
    fi

    init
    RESULT=$?
    if [[ ${RESULT} -ne 0 ]]; then
        echo    "Initialize ferry failed(${RESULT})"
        return  2
    fi

    for f in ${defineFiles} ; do
        "${f}"
        RESULT=$?
        if [[ ${RESULT} -ne 0 ]]; then
            return  2
        fi
    done

    return  0
}

function main()
{
    if [[ $# -lt 1 ]]; then
        echo    "Missing parameters, type -h for help"
        return  1
    fi

    if [[ $# -gt 0 ]]; then
        if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
            help    "$@"
            return  "$?"
        fi
    fi

    if [[ "$1" == "install" ]]; then
        install "$@"
        return  "$?"
    fi

    echo    "Unsupported parameter '$1'"
    return  1
}


main  "$@"
exit  "$?"

